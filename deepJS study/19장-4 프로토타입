정적 프로퍼티/메서드는 생성자 함수로 인스턴스를 생성하지 않아도 참조/호출할 수 있는 프로퍼티 메서드를 말한다.
즉, 생성자 함수는 객체임으로 자신의 프로퍼티/메서드를 소유할 수 있는데 이것은 자신이 생성한 인스턴스의 프로토타입 체인에는 속하지 않으므로
인스턴스가 참조/호출할 수 없다.

인스턴스/프로토타입 메서드 내에 this를 사용하지 않는경우 그 메서드는 정적 메서드로 변경할 수 있다.
즉, 메서드 내에서 인스턴스를 참조할 필요가 없다면 정적 메서드로 사용하여도 작동이 된다. 인스턴스를 굳이 생성하지 않아도 생성자함수가 바로 호출할 수 있음

in 연산자
in 연산자는 객체 내 특정 프로퍼티가 존재 여부를 확인한다. 그 객체의 프로퍼티 뿐만 아니라 대상 객체가 상속받은 프로토타입의 프로퍼티까지 확인함을 주의해야함.

객체 고유의 프로퍼티인지 확인하는 메서드는 hasOwnProperty 메서드이다.

ES6에서 도입된 in 연산자와 동일하게 동작하는 Reflect.has 메서드 방식도 있다.

for in문은 객체의 프로토타입 체인상에 존재하는 모든 프로토타입의 프로퍼티를 열거한다. 다만 프로퍼티 어트리뷰트 [[Enumerable]]의 값이 true인 열거 가능한 프로퍼티만을 순회하며 열거한다. 또한 프로퍼티 키가 심벌인 프로퍼티도 열거하지 않는다.
for in문은 자신의 고유한 프로퍼티만을 열거하지 않기 때문에 hasOwnProperty를 사용해야하는 번거로움이 있을 수 있다. 때문에 ES8에서 도입된 Object.key/values/entire 메서드를 사용하는 것이 좋다. 이것은 객체 자신만의 열거 가능한 프로퍼티 키를 배열로 반환한다.

Strict mode란 말그대로 엄격한 문법으로 오류를 줄이는 방식이다.
예로 함수 내 선언하지 않은 변수를 할당하였을때 함수내, 전역 어디에도 그 변수가 선언되지 않았음에도 불구하고 자바스크립트 엔진이 전역 객체에 그 변수를 할당한다. 이것은 전역 변수처럼 사용할 수 있고 이것을 암묵적 전역이라 하는데 의도를 가지고 전역변수를 선언한게 아니므로 오류의 원인이 될 수 있다.

하지만 Strict mode는 스크립트 단위로 실행되기 때문에 이것이 사용되지 않은 라이브러리와 혼용하는 경우 오류를 발생시킬 위험이 있고 일일히 스코프를 고려하여 사용하는 번거로움이 있으므로 린트 도구를 사용하는 것이 좋다.

