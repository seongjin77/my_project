var 키워드로 선언된 변수는 오직 함수의 코드 블록만을 지역스코프로 인정한다. 때문에 if문 같은 코드블록 내에서 같은 이름으로 변수가 선언되면 덮어 씌어진다.

var는 재할당 재선언 불가능 함수 레벨 스코프를 지원함, 호이스팅 가능
let은 재선언 불가능 재할당 가능 블록 레벨 스코프 지원, 호이스팅 불가
const는 재선언 재할당 불가능 블록 레벨 스코프 지원, 호이스팅 불가

let이 호이스팅 불가능한 이유는 var는 런타임 이전에 선언과 초기화된 값의 할당 단계가 함께 일어나기 때문에 호이스팅이 가능하지만 let 키워드는 선언 단계와 초기화 단계가 분리되어 진행되기 때문이다.
선언은 런타임 이전에 실행되지만 초기화 값으로 할당 되는 것은 변수 선언문을 만났을때 실행되기 때문이다. 때문에 변수 선언문을 읽기 전에 let 변수를 참조하려고 하면 참조 에러가 난다.

이렇게 let 키워드로 선언한 변수가 변수 선언문을 만나기 전까지의 구간을 변수를 참조 할 수 없다는 의미의 일시적 사각지대(TDZ)라고 부른다. 이러한 이유때문에 변수 호이스팅이 불가능 한 것처럼 보이는거지 사실은 호이스팅이 되기는 한다.

var 키워드로 선언한 전역변수, 전역함수, 선언하지 않은 변수에 값을 할당한 암묵적 전역은 전역객체 window의 프로퍼티가 된다. 따라서 위의 값을 참조할때는 window가 생략된 것으로 볼 수 있다.

원시값과 상수를 언뜻 생각하면 둘 다 바꿀 수 없는 값. 이렇게 오해하기 쉽지만 원시 값은 말 그대로 변경 불가능 한 값이고, 상수는 재할당이 불가능한거지 재할당만 하지않으면 값을 변경 할 수 있다.
예로 상수에 객체를 할당하면 재할당 없이 객체의 프로퍼티를 변경 할 수 있기때문에 상수에 객체를 할당할 경우 값을 변경할 수 있다.

var는 불확실성이 너무 커서 사용안하는 것이 좋고, let은 재할당하는 경우에만 사용하며 웬만해서는 const를 쓰는것이 좋다.
