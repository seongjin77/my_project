소스코드의 타입에 따라 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르기 때문에 소스코드를 4가지로 구분한다.
전역 코드, 함수 코드, eval코드, 모듈 코드

전역 코드: 전역에 존재하는 소스코드. 전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않음.
함수 코드: 함수 내부에 존재하는 소스코드, 함수 내부에 중첩된 함수 , 클래스 등의 내부 코드는 포함되지 않음.
eval 코드: 빌트인 전역 함수인 eval 함수에 인수로 전달되어 실행되는 소스코드.
모듈 코드: 모듈 내부에 존재하는 소스코드를 말함. 모듈 내부의 함수, 클래스 등의 내부 코드는 평가되지 않음.

각각의 소스코드마다 관리해야하는 변수와 스코프가 다르기 때문에 생성되는 컨텍스트가 달라진다.

소스 코드의 과정은 소스코드를 평가하여 실행 컨텍스트를 생성하고, 변수나 함수의 선언문만 실행하여 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경 레코드)에 등록함.
소스 코드의 평가 이후 선언문을 제외한 코드가 실행된다.즉 런타임이 시작. '코드를 실행할때' 실행 컨텍스트에 등록된 변수나 함수의 참조는 실행 컨텍스트에 등록된 값을 참조하고 변경된 값도 다시 실행 컨텍스트에 등록함. 


의문???//변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득한다. 그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록된다. 재할당시에도 실행컨텍스트에 등록이 됨.
--------------------------------------------------------
'실행 컨텍스트의 역할'

코드가 실행되려면 스코프의 구분, 스코프 체인을 통한 식별자의 검색, 코드 실행 순서 등의 관리가 필요하는데 이것을 관리하기 위해 필요한 환경을 제공하고 실행 결과를 관리한다. 크게 두가지로 관리할 수 있음.
'식별자와 스코프'는 실행 컨텍스트의 렉시컬 환경으로 관리, '코드 실행 순서'는 실행 컨텍스트 스택으로 관리.(스택 자료구조로 관리하는 것) 맨위에 존재하는 실행 컨텍스트가 실행되고 있는 것.

실행 컨텍스트 스텍: 코드를 순차적으로 내려가면서 실행시킴. 세부적인 걸 파고들어가 실행시키고 다 끝내야지만 그 실행컨텍스트가 스택에서 지워짐. 그렇게 주르륵 실행시키고 더이상 실행시킬게 없으면 그 실행 컨텍스트를 삭제함 결국 코드가 다 실행되면 실행 컨텍스트 스택에도 남아있는게 있지 않음.

'렉시컬 환경'
식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트.
즉 요약하면 스코프와 식별자를 관리함.

렉시컬 환경은 '스코프를 구분하여 객체를 생성'하고 거기에 식별자를 등록, 관리한다. 두 개의 컴포넌트로 구분

'환경 레코드': 스코프를 구분하고, 스코프에 포함된 식별자를 등록. 등록된 식별자에 바인딩된 값을 관리하는 저장소. 소스코드의 타입에 따라 관리하는 내용에 차이가 있음.
'외부 렉시컬 환경에 대한 참조': 즉 상위 스코프를 가리킴. 참조시 스코프 체인을 구현.

'전역 객체는 전역 코드 평가 이전에 생성됨.' 
.소스 코드 평가 이루어지고 실행컨텍스트가 생성된다.? 이말은 즉 전역 실행 컨텍스트 생기기 전에 생성된다 제일먼저 생성되는거?


전역 코드 평가
'전역 실행 컨텍스트 생성 / 전역 렉시컬 환경생성 / 객체 환경 레코드 생성 / 선언적 환경 레코드 생성 / this 바인딩 / 외부 렉시컬 환경에 대한 참조 결정 순으로 이루어진다.'

전역 렉시컬 환경 생성을 나누어주는 이유: let,const와 같은 블록 레벨 스코프를 지원하는 키워드는 전역 변수로 선언되어도 전역객체 프로퍼티에 해당되지 않기 때문.

-----------------------------------------------------------------------
전역 코드 평가 이후 코드가 실행됨. 그치만 전역 코드를 평가할때 선언적 환경 레코드 생성 단계에서 let , const 키워드로 선언한 전역변수는 선언되어 있다고 확인만 시켜주는것인가? 환경 레코드 라는것은 식별자에 바인딩된 값을 관리한다고 되어있어서 


@@@@@@@@@@@발표할거


'실행 컨텍스트의 역할'

코드가 실행되려면 스코프의 구분, 스코프 체인을 통한 식별자의 검색, 코드 실행 순서 등의 관리가 필요하는데 이것을 관리하기 위해 필요한 환경을 제공하고 실행 결과를 관리한다. 크게 두가지로 관리할 수 있음.
'식별자와 스코프'는 실행 컨텍스트의 렉시컬 환경으로 관리, '코드 실행 순서'는 실행 컨텍스트 스택으로 관리.(스택 자료구조로 관리하는 것) 맨위에 존재하는 실행 컨텍스트가 실행되고 있는 것.

'실행 컨텍스트 스텍': 코드를 순차적으로 내려가면서 실행시킴. 세부적인 걸 파고들어가 실행시키고 다 끝내야지만 그 실행컨텍스트가 스택에서 지워짐. 그렇게 주르륵 실행시키고 더이상 실행시킬게 없으면 그 실행 컨텍스트를 삭제함 결국 코드가 다 실행되면 실행 컨텍스트 스택에도 남아있는게 있지 않음.

'렉시컬 환경'
식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트.

렉시컬 환경은 '스코프를 구분하여 객체를 생성'하고 거기에 식별자를 등록, 관리한다. 두 개의 컴포넌트로 구분
'환경 레코드': 스코프를 구분하고, 스코프에 포함된 식별자를 등록. 등록된 식별자에 바인딩된 값을 관리하는 저장소. 소스코드의 타입에 따라 관리하는 내용에 차이가 있음.
'외부 렉시컬 환경에 대한 참조': 즉 상위 스코프를 가리킴. 참조시 스코프 체인을 구현.

'전역 객체는 전역 코드 평가 이전에 생성됨.' 

전역 코드 평가
'전역 실행 컨텍스트 생성 / 전역 렉시컬 환경생성 / 객체 환경 레코드 생성 / 선언적 환경 레코드 생성 / this 바인딩 / 외부 렉시컬 환경에 대한 참조 결정 순으로 이루어진다.'