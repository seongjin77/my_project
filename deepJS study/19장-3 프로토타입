오버라이딩: 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의하여 사용하는 방식이다.
프로토타입 프로퍼티와 같은 이름의 프로퍼티를 인스턴스에 추가하면, 프로토 체인을 따라 올라가 프로토타입 프로퍼티를 수정하는것이 아니라 새로운 인스턴스 프로퍼티로 재정의한다.

하위 객체에서는 프로토타입의 프로퍼티를 추가할 수는 있지만 삭제, 변경 할 수는 없다.
변경하기 위해서는 프로토 타입에 직접 접근을 해야한다.

프로토타입을 교체하는 방법에는 두가지가 있다.
1. 생성자 함수에 의한 프로토타입의 교체
2. proto 접근자 프로퍼티를 통해 프로토타입을 교체

첫 번째 방법은 생성자 함수가 생성할 객체의 프로토타입을 객체 리터럴로 직접 할당하여 교체하는것이다.
자동으로 할당되게 두는것이 아니라 명시적으로 코드로 작성해 프로토타입을 교체하는 것. 교체된 프로토타입에는 constructor 프로퍼티가 없다. 따라서 생성자 함수를 가르키지 않는다. 

두 번째 방법은 미래에 생성할 인스턴스의 프로토타입을 미리 교체하는 첫번째 방법과 달리 이미 생성된 객체의 프로토타입을 교체하는 방법이다. 방법에는 큰 차이가 없으나 생성자 함수의 프로토타입 프로퍼티가 가리키는 것에 차이가 있다.
첫번째 방법에 의한 교체는 생성자 함수의 프로토타입 프로퍼티가 교체된 프로토타입을 가리키지만 두 번째 방법으로 교체된 프로토타입은 생성자함수의 프로토타입 프로퍼티가 가리키지 못한다. 이미 완성되고 교체하면 연결이 끊기기 때문이다.

instanceof 연산자는 이항연산자로서 좌항에는 객체를 가리키는 식별자, 우항에는 생성자 함수를 가리키는 식별자를 피연산자로 사용한다.
(객체식별자) instanceof (생성자함수 식별자)
우변의 생성자 함수의 prototype에 바인딩 된 객체가, 좌변의 객체의 프로토타입 체인 상에 존재하면 true로 평가되고 아니면 false를 반환한다. 즉 생성자 함수의 prototype에 바인딩된 객체가 프로토타입 체인 상에 존재하는지 확인하는 것이다.

직접상속
Object.create 메서드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다.
첫번째 매개변수에는 생성할 객체의 프로토타입으로 지정할 객체를 전달한다.
두번째 매개변수에는 생성할 객체의 프로퍼티를 갖는 객체를 전달한다. 이것은 생략 가능하다.

직접 상속의 장점
1. new 연산자가 없이도 객체를 생성할 수 있다.
2. 프로토타입을 지정하면서 객체를 생성할 수 있다. 첫번째 매개변수에 전달한 객체의 프로토타입 체인에 속하는 하위 객체를 만드는것
3. 객체 리터럴에 의해 생성된 객체도 상속받을 수 있다.

Object.create 메소드를 사용하는데 있어 프로퍼티를 정의하는 것은 번거로운 단점이 있다. 이를 해결하기 위해
proto 접근자 프로퍼티를 사용하여 프로토타입 객체를 지정할 수 있다.

정적 프로퍼티/메서드는 생성자 함수 객체가 소유한 프로퍼티 메서드를 말한다. 이것은 생성자 함수로 만든 인스턴스로 호출할 수 없다. 프로토타입 체인에 속해있지 않기 때문이다.