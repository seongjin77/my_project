모든 식별자(변수이름, 함수이름, 클리스이름 등)는 자신이 선언된 위치에 의해 자신을 참조할 수 있는 유효 범위가 결정된다. 즉 스코프는 식별자가 유효한 범위이다.

같은 식별자 이름이라도 스코프가 다르면 같은 이름의 식별자를 사용할 수 있다. 

함수 몸체 내부에서 선언된 변수는 지역변수, 코드 가장 바깥에서 선언된 변수는 전역변수이다.

전역변수에서 선언된 변수는 전역,지역 모두 참조 가능. 하지만 지역변수는 함수 외부에서 참조 불가능.
또한 지역 스코프는 중첩될 수 있으므로 계층적 구조를 갖는다. 모든 지역 스코프의 최상위 스코프는 전역 스코프이며 이렇게 연결된 것을 스코프 체인이라고 함.

즉 요약하면, 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조 가능하고 하위 스코프에서 유효한 변수는 상위 스코프에서 참조 불가능하다.

스코프 체인은 물리적으로 존재함. 자바스크립트 엔진이 코드를 실행하기 전에 렉시컬 환경을 실제로 생성하는데 변수 선언이 실행되면 변수 식별자가 렉시컬환경에 키로 등록되고, 이어서 변수 할당이 일어나면 이 렉시컬환경(자료구조)의 변수 식별자에 해당하는 값을 변경한다.
렉시컬 환경: 주변에 어떤 코드가 있는지 어디서 실행되는지를 렉시컬 환경이라고 함.

블록 레벨 스코프: C나 자바와 같은 프로그래밍 언어는 함수 몸체 뿐만 아니라 모든 코드블록(if, for, while)등이 지역 스코프를 만든다. 그렇다면 자바스크립트의 지역 스코프와 의미가 다르다고 이해. 자바스크립트에서는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성됨.

함수 레벨 스코프: var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하는 특성을 말한다. 전역변수 밑에 코드에 if문이나 for문같이 코드블록 내에서 같은 이름의 변수를 할당할 시 스코프로 인정되지 않아 코드블록 내 변수 값으로 덮어진다.

var 변수는 블록 레벨 스코프를 인정하지 않지만 let, const 키워드는 블록 레벨 스코프를 지원한다.