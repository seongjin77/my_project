모든 식별자(변수이름, 함수이름, 클리스이름 등)는 자신이 선언된 위치에 의해 자신을 참조할 수 있는 유효 범위가 결정된다. 즉 스코프는 식별자가 유효한 범위이다.

같은 식별자 이름이라도 스코프가 다르면 같은 이름의 식별자를 사용할 수 있다. 

함수 몸체 내부에서 선언된 변수는 지역변수, 코드 가장 바깥에서 선언된 변수는 전역변수이다.

전역변수에서 선언된 변수는 전역,지역 모두 참조 가능. 하지만 지역변수는 함수 외부에서 참조 불가능.
또한 지역 스코프는 중첩될 수 있으므로 계층적 구조를 갖는다. 모든 지역 스코프의 최상위 스코프는 전역 스코프이며 이렇게 연결된 것을 스코프 체인이라고 함.

즉 요약하면, 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조 가능하고 하위 스코프에서 유효한 변수는 상위 스코프에서 참조 불가능하다.

스코프 체인은 물리적으로 존재함. 자바스크립트 엔진이 코드를 실행하기 전에 렉시컬 환경을 실제로 생성하는데 변수 선언이 실행되면 변수 식별자가 렉시컬환경에 키로 등록되고, 이어서 변수 할당이 일어나면 이 렉시컬환경(자료구조)의 변수 식별자에 해당하는 값을 변경한다.
렉시컬 환경: 주변에 어떤 코드가 있는지 어디서 실행되는지를 렉시컬 환경이라고 함.

---
블록 레벨 스코프: C나 자바와 같은 프로그래밍 언어는 함수 몸체 뿐만 아니라 모든 코드블록(if, for, while)등이 지역 스코프를 만든다. 자바스크립트에서는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성됨. 그렇다면 자바스크립트의 지역 스코프와 의미가 다름.

함수 레벨 스코프: var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하는 특성을 말한다. 전역변수 밑에 코드에 if문이나 for문같이 코드블록 내에서 같은 이름의 변수를 할당할 시 스코프로 인정되지 않아 코드블록 내 변수 값으로 덮어진다.

var 변수는 블록 레벨 스코프를 인정하지 않지만 let, const 키워드는 블록 레벨 스코프를 지원한다.

---
동적스코프: 함수가 호풀되는 시점에 동적으로 상위 스코프를 결정하는 것을 동적 스코프라고 한다.

렉시컬 스코프 or 정적 스코프 : 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정되는 것을 렉시컬 스코프 또는 정적 스코프라 한다.

자바스크립트는 렉시컬 스코프를 따르므로 함수 호출시가 아닌 함수가 정의된 위치에 의해 상위 스코프가 결정된다



@@@@@@@@@@@@@@@@

스코프는 식별자가 유효한 범위입니다. 같은 식별자 이름이라도 스코프가 다르면 같은 이름의 식별자를 사용할 수 있습니다. 근데 개인적으로 같은 이름 식별자를 쓰면 헷갈려서 웬만해서는 지양하고 있습니다.

함수 몸체 내부에서 선언된 변수는 지역변수, 코드 가장 바깥에서 선언된 변수는 전역변수를 의미합니다.

전역변수에서 선언된 변수는 전역,지역 모두 참조 가능. 하지만 지역변수는 함수 외부에서 참조 불가능합니다.
또한 지역 스코프는 중첩될 수 있으므로 계층적 구조를 갖는다. 모든 지역 스코프의 최상위 스코프는 전역 스코프이며 이렇게 연결된 것을 스코프 체인이라고 하며 참조시 상위 스코프 방향으로 올라갑니다

즉 요약하면, 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조 가능하고, 하위 스코프에서 유효한 변수는 상위 스코프에서 참조 불가능합니다.

스코프 체인은 물리적으로 존재함. 이 말은 개념적으로 존재하는 것이 아니라 자바스크립트 엔진이 코드를 실행하기 전에 렉시컬 환경을 실제로 생성한다는 점을 알았습니다. 변수 선언이 실행되면 변수 식별자가 렉시컬환경에 키로 등록되고, 이어서 변수 할당이 일어나면 이 렉시컬환경(자료구조)의 변수 식별자에 해당하는 값을 변경합니다.
렉시컬 환경: 주변에 어떤 코드가 있는지 어디서 실행되는지를 렉시컬 환경이라고 합니다.
---
블록 레벨 스코프: C나 자바와 같은 프로그래밍 언어는 함수 몸체 뿐만 아니라 모든 코드블록(if, for, while)등이 지역 스코프를 만든다. 

책에보면 자바스크립트에서는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다 적혀져 있는데. 그렇다면 자바스크립트의 지역 스코프와 다른 프로그래밍 언어의 지역스코프의 의미가 다르다고 이해했습니다.

함수 레벨 스코프: var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하는 특성을 말한다. 전역변수 밑에 코드에 if문이나 for문같이 코드블록 내에서 같은 이름의 변수를 할당할 시 스코프로 인정되지 않아 코드블록 내 변수 값으로 덮어집니다.

var 변수는 블록 레벨 스코프를 인정하지 않지만 let, const 키워드는 블록 레벨 스코프를 지원합니다.

---
동적스코프: 함수가 호풀되는 시점에 동적으로 상위 스코프를 결정하는 것을 동적 스코프라고 한다.

렉시컬 스코프 or 정적 스코프 : 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정되는 것을 렉시컬 스코프 또는 정적 스코프라 합니다. 

자바스크립트는 렉시컬 스코프를 따르므로 함수 호출시가 아닌 함수가 정의된 위치에 의해 상위 스코프가 결정된다.

this는 동적 스코프@@@@@!!!!!!!!!!!!!!


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

명성님

스코프가 결정된다는 것은
스코프가 결정된다는 것은 다른 코드가 변수 자신을 참조할 수 있는 범위가 결정된다는 것을 말한다. 

렉시컬 환경
코드가 어디에서 실행되며 주변에 어떤 코드가 있는지를 렉시컬 환경이라고 한다.
스코프 체인은 실행 컨텍스트의 렉시컬 환경을 단방향으로 연결한 것이다.
전역 렉시컬 환경은 코드가 로드되면 곧바로 생성되고(전역 컨텍스트의 생성)
함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다.
 컨트롤러가 함수 실행 연산자()를 만났을 때 함수 렉시컬 환경(실행 컨텍스트)이 생성



매개변수는 함수 몸체 내부에서만 참조할 수 있다.
함수의 매개변수는 함수 몸체에 정의되었으므로 정의된 함수의 렉시컬 환경을 갖는다.


var 그리고 let,const
var 키워드는 같은 스코프 내에서 중복 선언이 허용되지만 let,const는 동일 스코프 내에서 중복 선언을 허용하지 않아 의도치 않은 변수의 재변경을 막아준다.

지역과 지역 스코프
지역이란 함수 몸체 내부를 말한다.
지역 변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다.

스코프 체인
실행 컨텍스트의 최심층 내부에서부터 변수를 찾아 전역 스코프까지 뻗어나간다.
스코프 체인은 물리적인 실체로 존재한다.(추상화 개념 X)
변수 선언이 실행되면 (소스 코드가 평가 될 때) 변수 식별자가 렉시컬 환경의 키로 등록되고, 변수 할당이 일어나면 (소스 코드가 실행 될 때) 변수 식별자에 해당하는 값을 변경한다.
변수의 검색도 이러한 렉시컬 환경에서 이루어진다.

함수 레벨 스코프
지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다. 즉, 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다.
다른 언어는 블록 레벨 스코프를 따르지만, var 키워드로 선언한 변수는 함수 레벨 스코프를 따른다. let, const는 블록 레벨 스코프를 따른다.

자바스크립트는 렉시컬 스코프를 사용한다.
자바스크립트는 함수를 어디에서 정의했는지에 따라 상위 스코프를 결정한다.
함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 주지 않는다.
즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프다.