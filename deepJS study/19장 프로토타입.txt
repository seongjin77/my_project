자바스크립트는 프로토타입 기반의 객체지향 프로그래밍 언어다.
프로퍼티를 통해 여러개의 값을 하나의 단위로 구성한 복합적인 자료구조다.

자바스크립트는 프로토타입을 기반으로 상속을 구현하는데 불필요한 중복을 제거할 수 있다.
예로 생성자 함수에 의해 새로운 인스턴스가 생성될때마다 메서드가 중복되는 경우 메모리의 비용낭비가 일어나게된다.

obj.prototype.key = fuction(){...code};
생성자 함수가 생성하는 모든 인스턴스는 prototype의 메서드를 공유해서 사용할 수 있다.
프로토타입에 메서드를 생성해서 사용 할 수 있음.

모든 객체는 [[prototype]]이라는 내부 슬롯을 가지며 이 내부 슬롯의 값은 프로토타입의 참조다. 내부슬롯이 (null)인 경우도 있음. 이 경우에는 프로토타입이 없다. 여기에 저장되는 값은 객체 생성 방식에 의해 결정된다.
모든 프로토타입은 생성자 함수와 연결되어 있다.
객체는 proto 접근자 프로퍼티를 통해 자신의 포로토타입 객체에 접근할 수 있고, 프로토타입은 constructor 프로퍼티를 통해 생성자 함수에 접근할 수 있고, 생성자 함수는 자신의 prototype 프로퍼티를 통해 프로토타입에 접근할 수 있다.

proto와 같은 접근자 프로퍼티는 자체적으로 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 수 있는 접근자 함수, [[get]] [[set]] 프로퍼티 어트리뷰트로 구성된 프로퍼티다.
get을 통해 프로토타입을 불러올 수 있고, set을 통해 프로토타입을 교체할 수 있다.

proto 접근자 프로퍼티는 최상위 객체인 Object.prototype의 프로퍼티다.
프로토타입에 접근하기 위해 proto라는 접근자 프로퍼티를 사용하는 이유는 단방향으로 흘러가 종착점이 있는 프로토체인이, 망가지는 것을 방지하기 위해서다. 코드 잘못됐을 경우 에러를 발생시킨다. 일종의 거름망 역할.

proto 접근자 프로퍼티를 코드 내 사용하는 것은 지양해야한다. 모든 객체가 proto 접근자 프로퍼티를 사용할 수 있는건 아니기 때문이다. 앞서 모든 객체는 프로토타입의 계층 구조인 프로토타입 체인에 묶여있다고 했고, 때문에 프로토타입의 최상위 객체인 Object.prototype에 상속되어 있을거라 생각하지만 아니다. 직접상속을 통해 Object.prototype을 상속받지 않는 객체를 생성 할 수도 있기 때문이다.

이경우엔 proto 접근자 프로퍼티가 수행했던 기능을 getPrototypeOf 메서드와 setPrototypeOf메서드를 사용해 대체할 수 있다.

함수 객체에는 함수객체만이 가지고 있는 prototype 프로퍼티가 있다. 생성자 함수가 자신이 생성할 객체의 프로토타입을 할당하기 위해 사용.
