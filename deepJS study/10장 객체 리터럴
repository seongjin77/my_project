자바스크립트는 객체 기반의 프로그래밍 언어이다. 자바스크립트를 구성하는 원시 값을 제외한 나머지 값(함수, 배열, 정규 표현식 등)은 모두 객체다.

원시 타입은 단 하나의 값만 나타내며, 변경 불가능 한 값이다.
객체 타입은 다양한 타입의 값을 하나의 단위로 구성한 복합적인 값이고, 변경 가능한 값이다.
객체는 객체의 상태를 나타내는 값, 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 메서드로 구성된 집합체이다. 

? 함수는 일급 객체 이므로 값으로 취급할 수 있다. 그렇다면 표현식? 일급객체가 뭐지?


인스턴스: 인스턴스란 클래스에 의해 생성되어 메모리에 저장된 실체를 말한다. 객체지향 프로그래밍에서는 객체는 클래스와 인스턴스를 포함한 개념이다. 클래스는 인스턴스를 생성하기 위한 템플릿의 역할을 한다. 인스턴스는 객체가 메모리에 저장되어 실제로 존재하는 것에 초점을 맞춘 용어이다. 메모리에 저장되어 있는 객체의 값을 인스턴스라 하는 것이라 이해.

C++이나 자바같은 클래스 기반 객체지향 언어는 클래스를 사전에 정의하고 필요한 시점에 new 연산자와 함께 생성자를 호출하여 인스턴스를 생성하는 방식으로 객체를 생성한다.

자바스크립트는 프로토타입 기반 객체지향 언어로서 클래스 기반 객체지향 언어와는 달리 다양한 객체 생성 방법을 지원한다.

;제일 쉬운 방법은 객체 리터럴을 사용하는 방법이며 중괄호 내에 0개 이상의 프로퍼티를 정의한다. 변수에 할당되는 시점에 자바스크립트 엔진은 객체 리터럴을 해석해 객체를 생성한다.

객체 리터럴인 중괄호는 코드 블록의 중괄호랑 다르다. 객체 리터럴은 값으로 평가되는 표현식이며 따라서 객체 중괄호 뒤에는 세미콜론을 붙인다.

프로퍼티 키는 빈 문자열을 포함하는 모든 문자열 또는 심벌 값을 쓸 수 있는데 식별자 네이밍 규칙을 따르지 않는 이름에는 반드시 따음표를 사용해서 묶어줘야 한다. 빈 문자열을 프로퍼티 키로 사용해도 에러가 발생하지 않는다.

문자열이나 심벌 값 외의 값을 사용하면 암묵적 타입 변환을 통해 문자열이 된다. 예로 숫자 리터럴을 프로퍼티 키로 사용한다면 따옴표는 붙지 않지만 문자열로 변환된다.

프로퍼티에 접근하는 방법은 마침표 표기법과 대괄호 표기법이 있다. 대괄호 표기법을 사용할때 대괄호 안에 따옴표로 감싼 프로퍼티 키를 써주어야만 접근이 가능하며 따옴표를 쓰지 않으면 식별자로 해석한다. 예외는 키가 숫자로 이루어진 문자열인 경우 따옴표가 생략 가능하다.

객체에 존재하지 않는 프로퍼티에 접근하면 참조에러가 아니라 undefined를 반환한다.

ES6에서는 객체의 프로퍼티 값을 식별자 표현식을 대신해서 쓸 수 있으며 변수의 이름과 프로퍼티 키의 이름이 같은 경우 프로퍼티 키를 생략해서 객체를 생성할 수 있다.
let x = 1, y = 2;

const obj = { x, y };

프로퍼티 키를 생성할때 대괄호 안에 문자열 또는 문자열로 평가되는 표현식을 사용하면 동적으로 프로퍼티 키를 생성할 수 있다. 

ES6에서는 메서드를 정의할때 function 키워드를 생략한 축약 표현을 사용할 수 있다.


@@@@@@@@@@@@@@@@@@@@@@@@@@

자바스크립트는 객체 기반의 프로그래밍 언어이다. 자바스크립트를 구성하는 원시 값을 제외한 나머지 값(함수, 배열, 정규 표현식 등)은 모두 객체다.

원시 타입은 단 하나의 값만 나타내며, 변경 불가능 한 값이다.
객체 타입은 다양한 타입의 값을 하나의 단위로 구성한 복합적인 값이고, 변경 가능한 값이다.
객체는 객체의 상태를 나타내는 값, 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 메서드로 구성된 집합체이다. 

인스턴스: 인스턴스란 클래스에 의해 생성되어 메모리에 저장된 실체를 말한다. 객체지향 프로그래밍에서는 객체는 클래스와 인스턴스를 포함한 개념이다. 클래스는 인스턴스를 생성하기 위한 템플릿의 역할을 한다. 인스턴스는 객체가 메모리에 저장되어 실제로 존재하는 것에 초점을 맞춘 용어이다. 메모리에 저장되어 있는 객체의 값을 인스턴스라 하는 것이라 이해.

객체 리터럴인 중괄호는 코드 블록의 중괄호랑 다르다. 객체 리터럴은 값으로 평가되는 표현식이며 따라서 객체 중괄호 뒤에는 세미콜론을 붙인다.

프로퍼티 키는 빈 문자열을 포함하는 모든 문자열 또는 심벌 값을 쓸 수 있는데 식별자 네이밍 규칙을 따르지 않는 이름에는 반드시 따음표를 사용해서 묶어줘야 한다. 빈 문자열을 프로퍼티 키로 사용해도 에러가 발생하지 않는다.

객체에 존재하지 않는 프로퍼티에 접근하면 참조에러가 아니라 undefined를 반환한다.

ES6에서는 메서드를 정의할때 function 키워드를 생략한 축약 표현을 사용할 수 있다.


ES6 메서드 축약 표현으로 정의한 메서드는 프로퍼티에 할당한 함수와 다르게 동작한다.
=> 인스턴스를 생성할 수 없는 non-constructor이며 prototype 생성이 불가하며 자신을 바인딩한 객체를 가리키는 내부 슬롯 [[HomeObject]]를 갖게 되어 super 키워드를 사용할 수 있게 된다.
super 키워드는 프로토타입 체인 상위에 있는 메서드를 사용할 수 있게 한다.

? 함수는 일급 객체 이므로 값으로 취급할 수 있다. 그렇다면 표현식? 일급객체가 뭐지?