--값은 식(표현식)이 평가되어 생성된 결과를 말한다. 
--표현식은 값으로 평가될 수 있는 문장이다. ex) 리터럴은 값으로 평가됨. 따라서 리터럴자체도 표현식
--평가란 식을 해석해서 값을 생성하거나 참조하는 것을 의미한다.

모든 데이터는 2진수로 메모리에 저장되고 변수는 하나의 값을 저장하기 위해 
메모리 공간 자체 또는 그 메모리공간을 식별하기 위해 붙인 이름이다.

*리터럴: 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법

우리가 아는 단순 숫자가 아니라 값을 생성하기 위해 
( 숫자, 알파벳 또는 약속된 기호등으로 표기한 코드)이다.
자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다.

표현식은 값으로 평가 될 수 있는 문은 모두 표현식이다. 예로 리터럴과 연산자로 이루어진 문도
숫자 100을 생성함으로 표현식이고 값이 저장된 변수또한 값으로 평가되므로 표현식이다. 여기서

표현식과 평가된 값은 동등한 관계인 동치라 한다. 따라서 표현식은 값처럼 사용할 수 있고
값이 위치할 수 있는 자리에 표현식도 위치할 수 있다.

; 식별자 표현식는 값을 생성하지는 않지만 값으로 평가되므로 표현식이며, 이것은 값과 동치의
관계임으로 값이 위치할 수 있는 자리에 사용할 수 있다.

문은 (프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.) 즉 명령문이다.
따라서 문의 집합체가 프로그램이며 문을 작성하고 순서에 맞게 나열하는 것이 프로그래밍이다.

이 문은, 문법적인 의미를 가지며 문법적으로 더 이상 나눌 수 없는 코드의 기본
요소를 의미하는 토큰으로 구성된다.(식별자, 연산자, 리터럴, 특수기호등이 토큰이다)

문은 선언문,할당문,조건문,반복문으로 나눌 수 있다.

세미콜론은 문의 종료를 나타낸다. 따라서 문을 끝낼 때에는 세미콜론을 붙여야한다.
다만 0개 이상의 문을 중괄호로 묶은 코드 블록{} 뒤에는 세미콜론을 붙이지 않는다.
코드 블록은 문의 종료를 의미하는 자체종결성을 갖기때문이다.

문의 끝에 붙이는 세미콜론은 생략이 가능한데, 자바스크립트 엔진이 문의 끝이라고 예측되는 지점에
세미콜론을 자동으로 붙여주는 ASI기능이 있기 때문이다. 하지만 이 기능과 개발자의 예측이
일치하지 않는 경우가 생길 수 있으니 세미콜론을 귀찮더라도 붙여주는 습관이 좋다.

;변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다.

표현식은 문의 일부이며 그 자체로 문이 될 수 있다.

문은 프로그램의 최소 실행 단위. 명령문이다.

;표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단한 방법은 변수에 할당해 보는 것이다.
변수에 값을 할당 할수 있는 문은 표현식인 문이며, 할당하지 못하는 문은 표현식이 아니다.

완료값: 크롬 개발자 도구에서 표현식이 아닌 문을 실행하면 항상 undefined를 출력하는데 이것을 
완료 값이라 하며, 표현식의 평가 결과가 아니다. 따라서 변수에 할당 할 수 없고 참조가 불가능하다.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




값은 식(표현식)이 평가되어 생성된 결과를 말한다. 
표현식은 값으로 평가될 수 있는 문이다. ex) 리터럴은 값으로 평가됨. 따라서 리터럴자체도 표현식
평가란 식을 해석해서 값을 생성하거나 참조하는 것을 의미한다.



*리터럴: 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법

우리가 아는 숫자는 단순 아라비아 숫자가 아니라 값을 생성하기 위해 숫자, 알파벳 또는 약속된 기호등 으로 표기한 코드이다.
자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다.

표현식과 평가된 값은 동등한 관계인 동치라 한다. 따라서 표현식은 값처럼 사용할 수 있고
값이 위치할 수 있는 자리에 표현식도 위치할 수 있다.


문은 (프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.) 즉 명령문이다.
이 문은, 문법적인 의미를 가지며 문법적으로 더 이상 나눌 수 없는 코드의 기본
요소를 의미하는 토큰으로 구성된다.(식별자, 연산자, 리터럴, 특수기호등이 토큰이다)

표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단한 방법은 변수에 할당해 보는 것이다.
변수에 값을 할당 할수 있는 문은 표현식인 문이며, 할당하지 못하는 문은 표현식이 아니다.

세미콜론은 문의 종료를 나타낸다. 따라서 문을 끝낼 때에는 세미콜론을 붙여야한다.
문의 끝에 붙이는 세미콜론은 생략이 가능한데, 자바스크립트 엔진이 문의 끝이라고 예측되는 지점에
세미콜론을 자동으로 붙여주는 ASI기능이 있기 때문이다. 하지만 이 기능과 개발자의 예측이
일치하지 않는 경우가 생길 수 있으니 세미콜론을 귀찮더라도 붙여주는 습관이 좋다.

완료값: 크롬 개발자 도구에서 표현식이 아닌 문을 실행하면 항상 undefined를 출력하는데 이것을 
완료 값이라 하며, 표현식의 평가 결과가 아니다. 따라서 변수에 할당 할 수 없고 참조가 불가능하다.

크롬 개발자 도구에서 표현식인 문을 실행하면 항상 평가된 값을 반환한다.