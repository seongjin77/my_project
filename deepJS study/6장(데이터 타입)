자바스크립트의 모든 데이터 값은 원시타입과 객체 타입으로 구분된다.

원시 타입에는 숫자,문자열,불리언,undefined,null, 심벌 타입이 있고
객체 타입에는 객체,함수,배열 등이 있다.

C나 자바의 경우 정수와 실수를 구분해서 int, long, float, double 등과 같은 여러 숫자 타입이 있다
하지만 자바스크립트는 배정밀도 64비트 부동소수점 형식 즉,
하나의 숫자 타입만 존재하며 모든 수를 실수로 처리한다. 정수만 표현하는 
데이터 타입이 별도로 존재하지 않는다. 마찬가지로 자바스크립트는 2진수 8진수 등을 표현하기 위한
데이터 타입을 제공하지 않기 때문에 이를 참조하면 모두 10진수로 해석된다. 

숫자 타입은 추가적으로 3가지 특별한 값을 표현할 수 있다. 
Infinity
-Infinity
NAN: 산술 연산 불가 (not a number)

//////////
문자열 타입은 텍스트 데이터를 나타내는 데 사용한다. 0개 이상의 16비트 유니코드 문자의 집합으로
표현된다. 문자열은 '', "",`` 으로 텍스트를 감싸서 사용한다. 일반적으로는 ''선호

C는 문자열 타입을 제공하지 않고 문자의 배열로 문자열을 표현하고, 자바는 문자열을 객체로 표현한다
자바스크립트의 문자열을 말했다싶이 원시 타입이며 변경 불가능한 값이다. 한 번 생성되면 변경할 수 없다.

템플릿 리터럴은 ES6부터 도입된 새로운 문자열 표기법인데 백틱``을 사용해 표현한다. 
템플릿 리터럴은 멀티라인 문자열,표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능을 제공한다.
템플릿 리터럴은 런타임에 일반 문자열로 변환된다고 한다. 

일반적으로 문자열 내에서 줄바꿈등을 표현할 수 없다. 떄문에 /백슬래시로 시작하는
이스케이프 시퀀스를 사용해야한다. 개행문자는 라인피드와 캐리지 리턴이 있는데 자바스크립트에선
둘 다 똑같이 작동하고 보통 라인피드를 사용해 개행한다.

-멀티라인 문자열은 이스케이프 시퀀스를 사용하지 않고 줄바꿈이나 공백을 표현할 수 있다.

-문자열은 문자열 연산자 +를 사용해 연결 할 수 있다. 
피연산자 중 하나 이상이 문자열일 경우 문자열 연결 연산자로 동작하고
그 외의 경우엔 덧셈 연산자로 동작한다.

표현식 삽입은 ${}으로 표현식을 감싸주어 사용하는데 표현식의 평가 결과가 문자열이 아니라도
문자열로 타입을 변경하여 삽입할 수 있다. 반드시 템플릿 리터럴 백틱``안에서 사용해야한다.

불리언 타입은 ture와 false뿐이다. 따라서

undefined타입의 값은 undefinded뿐이다. 변수를 선언하고 메모리 공간을 확보했을때 빈 상태로
내버려두지 않고 undefined값으로 초기화 하여 할당한다. 

C언어와 같은 다른 프로그래밍 언어에서는 선언과 정의를 구분해서 사용하는데
선언은 컴파일러에게 식별자의 존재만 알리는 것이고, 정의는 실제로 컴파일러가 변수를 생성해서
식별자와 메모리 주소를 연결되었을때 정의를 말한다. 하지만 자바스크립트에서는 선언과 동시에
정의가 이뤄지기 때문에 구분을 나누기가 쉽지 않다. 

null타입의 값은 null이 유일하며 변수에 값이 없다는 것을 의도적으로 명시할때 사용한다. 
이것은 이전에 참조하던 값을 더 이상 참조 하지 않겠다는 의미이며 참조하지 않는 메모리 공간에
대해 자바스크립트 엔진은 가비지 콜렉션을 수행할 것이다.
함수가 유효한 값을 반환할 수 없는 경우 에러대신 null을 반환한다.

심벌타입
심벌은 변경 불가능한 원시 타입의 값으로 심벌 값은 다른 값과 중복되지 않는 유일한 값이다.
주로 이름이 충돌한 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.
심벌은 symbol함수를 호출해 생성한다.

-데이터 타입의 필요성은 값의 종류에 따라 저장할 메모리 공간의 크기를 결정할 수 있기 때문이다.
또한 데이터 값을 참조시에 값과 바인딩 된 변수또한 그 값과 같은 타입으로 인식되어 데이터 값을
훼손하지 않고 읽어들일 수 있다.
ECMAScript 사양은 문자열과 숫자 타입 외의 데이터 타입에 대한 크기를 명시적으로 규정하지 않는다.
따라서 자바스크립트 엔진 제조사의 구현에 따라 문자열과 숫자 타입을 제외한 메모리 공간의 크기
차이가 존재할 수 있다.

심벌 테이블: 컴파일러 또는 인터프리터는 심벌테이블이라고 부르는 자료 구조를 통해 식별자를
키로 바인딩된 값의 메모리 주소 , 데이터 타입, 스코프 등을 관리한다.

데이터 타입이 필요한 이유@@@

값을 저장할 떄 확보해야 하는 메모리 공간의 크기를 결정하기 위해
값을 참조할 때 한번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해


C나 자바 같은 언어는 정적 타입 언어이다. 변수를 선언할 때 데이터 타입을 사전에 선언해야 한다.
이를 명시적 타입 선언이라 한다. 정적 타입 언어는 변수의 타입을 변경할 수 없으며, 변수에 선언한
타입에 맞는 값만 할당할 수 있다. 정적 타입언어는 컴파일 시점에 타입 체크를 수행한다.
이때 타입에 맞는 값이 선언되지 않는등 문제가 있으면 에러를 발생시키고 프로그램의 실행을 막는다.
이는 안정적인 코드를 구현하는데 도움을 준다.

자바스크립트는 동적 언어이며 변수를 선언할때 타입을 선언하지 않는다. 값을 할당하는 시점에
변수의 타입이 동적으로 결정되고 변수의 타입도 자유롭게 변경할 수 있다. 변수는 타입을 갖지 않고
변수에 할당된 값에 의해 타입이 결정된다. 유연성은 높지만 신뢰성은 떨어지는 단점이 있다.



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

자바스크립트의 모든 데이터 값은 원시타입과 객체 타입으로 구분된다.

원시 타입에는 숫자,문자열,불리언,undefined,null, 심벌 타입이 있고
객체 타입에는 객체,함수,배열 등이 있다.

템플릿 리터럴은 ES6부터 도입된 새로운 문자열 표기법인데 백틱``을 사용해 표현한다. 
템플릿 리터럴은 멀티라인 문자열,표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능을 제공한다.
템플릿 리터럴은 런타임에 일반 문자열로 변환된다고 한다. 

일반적으로 문자열 내에서 줄바꿈등을 표현할 수 없다. 떄문에 /백슬래시로 시작하는
이스케이프 시퀀스를 사용해야한다. 개행문자는 라인피드와 캐리지 리턴이 있는데 자바스크립트에선
둘 다 똑같이 작동하고 보통 라인피드를 사용해 개행한다.

멀티라인 문자열은 이스케이프 시퀀스를 사용하지 않고 줄바꿈이나 공백을 표현할 수 있다.
표현식 삽입은 ${}으로 표현식을 감싸주어 사용하는데 표현식의 평가 결과가 문자열이 아니라도
문자열로 타입을 변경하여 삽입할 수 있다. 반드시 템플릿 리터럴 백틱``안에서 사용해야한다.

undefined타입의 값은 undefinded뿐이다. 변수를 선언하고 메모리 공간을 확보했을때 빈 상태로
내버려두지 않고 undefined값으로 초기화 하여 할당한다.
초기화 되지 않으면 다른 애플리케이션이 사용했던 값이 남아 결과에 문제가 
생길 수 있기 때문이다.


-데이터 타입이 필요한 이유

값을 저장할 떄 확보해야 하는 메모리 공간의 크기를 결정하기 위해
값을 참조할 때 한번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

C나 자바 같은 언어는 정적 타입 언어이다. 변수를 선언할 때 데이터 타입을 사전에 선언해야 한다.
이를 명시적 타입 선언이라 한다. 정적 타입 언어는 변수의 타입을 변경할 수 없으며, 변수에 선언한
타입에 맞는 값만 할당할 수 있다. 정적 타입언어는 컴파일 시점에 타입 체크를 수행한다.
이때 타입에 맞는 값이 선언되지 않는등 문제가 있으면 에러를 발생시키고 프로그램의 실행을 막는다.
이는 안정적인 코드를 구현하는데 도움을 준다.

자바스크립트는 동적 언어이며 변수를 선언할때 타입을 선언하지 않는다. 값을 할당하는 시점에
변수의 타입이 동적으로 결정되고 변수의 타입도 자유롭게 변경할 수 있다. 변수는 타입을 갖지 않고
변수에 할당된 값에 의해 타입이 결정된다. 유연성은 높지만 신뢰성은 떨어지는 단점이 있다.

@@@@@@@@@@@@@@@@@@

각 데이터 타입마다 확보해야 할 메모리 공간의 크기와 메모리에 저장되는 2진수가 다르고, 읽어 들여 해석하는 방식도 다르다.

NaN : Number 타입이다.

String : 0개 이상의 16비트 유니코드 문자의 집합이다. 문자열을 따옴표로 감싸는 이유는 식별자 같은 토큰(의미를 갖는 최소한의 단위)을 구별하기 위해서다. 다른 언어와 다르게 자바스크립트의 문자열은 원시 타입이며 변경 불가능한 값이다.
+ : 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.
undefined와 null의 차이는 개발자의 의도 유무다.
ECMAScript 사양에서 변수는 선언한다라고 표현하고, 함수는 정의한다라고 표현한다.
document.querySelector는 HTML요소를 검색할 수 없는 경우 에러 대신 null을 반환한다.

Symbol : Symbol 함수를 통해 생성된 Symbol 값은 외부에 노출되지 않는다.

자바스크립트는 숫자 타입의 값을 생성할 때 64비트 부동소수점 형식을 사용한다.
자바스크립트 엔진이 값을 찾을 때 심벌 테이블이라는 자료 구조를 통해 값을 찾는다.또한 데이터 타입에 따라 메모리에 저장된 2진수 해석을 달리한다.

동적 타이핑을 선택한 프로그래밍 언어는 변수는 타입을 갖지 않고 값만이 타입을 갖기에 변수의 타입은 할당되는 값에 의해 동적으로 결정된다.


데이터 타입이 필요한 이유
- 값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해
- 값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
- 메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해



궁금한 점 : Symbol값은 외부에 노출되지 않는다는 것이 for문 for in문을 통해 검색할 수 없다enumerable이 false가 되는 것인가?